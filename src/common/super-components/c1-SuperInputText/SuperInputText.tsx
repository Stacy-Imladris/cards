import {
    ChangeEvent,
    DetailedHTMLProps,
    InputHTMLAttributes,
    KeyboardEvent,
    memo,
    useState
} from 'react'
import styles from './SuperInputText.module.css'

// —Ç–∏–ø –ø—Ä–æ–ø—Å–æ–≤ –æ–±—ã—á–Ω–æ–≥–æ –∏–Ω–ø—É—Ç–∞
type DefaultInputProps = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>

// –∑–¥–µ—Å—å –º—ã –≥–æ–≤–æ—Ä–∏–º —á—Ç–æ —É –Ω–∞—à–µ–≥–æ –∏–Ω–ø—É—Ç–∞ –±—É–¥—É—Ç —Ç–∞–∫–∏–µ –∂–µ –ø—Ä–æ–ø—Å—ã –∫–∞–∫ —É –æ–±—ã—á–Ω–æ–≥–æ –∏–Ω–ø—É—Ç–∞
// (—á—Ç–æ–± –Ω–µ –ø–∏—Å–∞—Ç—å value: string, onChange: ...; –æ–Ω–∏ —É–∂–µ –≤—Å–µ –æ–ø–∏—Å–∞–Ω—ã –≤ DefaultInputProps)
type Props = Omit<DefaultInputProps, 'type'> & { // –∏ + –µ—â—ë –ø—Ä–æ–ø—Å—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –∏–Ω–ø—É—Ç–µ
    eye?: boolean //—É–∫–∞–∑—ã–≤–∞–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –≥–ª–∞–∑ –≤–æ–∑–ª–µ –∏–Ω–ø—É—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—â–∏–π —Ç–∏–ø—ã text/password
    onChangeText?: (value: string) => void
    onEnter?: () => void
    error?: string
    spanClassName?: string
}

export const SuperInputText = memo((
    {
        //type, // –¥–æ—Å—Ç–∞—ë–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—Ç–æ–± –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∏–Ω–ø—É—Ç–∞
        onChange, onChangeText,
        onKeyPress, onEnter,
        error,
        className, spanClassName, eye = false,

        ...restProps// –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—Å—ã –ø–æ–ø–∞–¥—É—Ç –≤ –æ–±—ä–µ–∫—Ç restProps
    }: Props
) => {
    const [typeText, setTypeText] = useState(!eye)

    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {
        onChange // –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—Å onChange
        && onChange(e) // —Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –µ (–ø–æ—Å–∫–æ–ª—å–∫—É onChange –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)

        onChangeText && onChangeText(e.currentTarget.value)
    }
    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {
        onKeyPress && onKeyPress(e);

        onEnter // –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—Å onEnter
        && e.key === 'Enter' // –∏ –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Enter
        && onEnter() // —Ç–æ –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ
    }

    const switchInputType = () => {
        setTypeText(!typeText)
    }

    const finalSpanClassName = `${styles.error} ${spanClassName ? spanClassName : ''}`
    const finalInputClassName = `${styles.errorInput} ${className ? className : ''}`

    return (
        <>
            <div className={styles.superInput}>
                <div className={styles.eye}/>
                <div>
                    <input
                        type={typeText ? 'text' : 'password'}
                        onChange={onChangeCallback}
                        onKeyPress={onKeyPressCallback}
                        className={finalInputClassName}

                        {...restProps} // –æ—Ç–¥–∞—ë–º –∏–Ω–ø—É—Ç—É –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (value –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–º –≤–Ω—É—Ç—Ä–∏)
                    />
                </div>
                <div className={styles.eye}>
                    {eye && <span onClick={switchInputType}>üëÅ</span>}
                </div>
            </div>
            <div className={finalSpanClassName}>
                {error && <span>{error}</span>}
            </div>
        </>
    )
})